{"version":3,"sources":["app/services/menu.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;;GAEG;AACH,qBAA2B,eAAe,CAAC,CAAA;AAE3C,qBAAgD,eAAe,CAAC,CAAA;AAChE,2BAA+B,iBAAiB,CAAC,CAAA;AACjD,QAAO,2BAA2B,CAAC,CAAA;AACnC,QAAO,uBAAuB,CAAC,CAAA;AAC/B,QAAO,sBAAsB,CAAC,CAAA,CAAE,QAAQ;AACxC,QAAO,yBAAyB,CAAC,CAAA;AAGjC;IAEI,qBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAEtB,iBAAY,GAAG,yBAAyB,CAAC,CAAE,iBAAiB;IAFnC,CAAC;IAIlC,qCAAe,GAAf;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;aAClC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAEO,iCAAW,GAAnB,UAAoB,GAAa;QAC7B,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC;YACxC,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAC1D,CAAC;QACD,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAG,CAAC;IAC5B,CAAC;IAEO,iCAAW,GAAnB,UAAqB,KAAU;QAC3B,gFAAgF;QAChF,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,IAAI,cAAc,CAAC;QAC7C,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAxBM,sBAAU,GAAG,GAAG,CAAC;IAF5B;QAAC,iBAAU,EAAE;;mBAAA;IA2Bb,kBAAC;AAAD,CA1BA,AA0BC,IAAA;AA1BY,mBAAW,cA0BvB,CAAA","file":"app/services/menu.service.js","sourcesContent":["/**\n * Created by LeonardoAlmeida on 30/04/16.\n */\nimport { Injectable } from '@angular/core';\nimport { ItemDefinition } from \"../models/item.model\";\nimport { Http, URLSearchParams, Response } from '@angular/http';\nimport { Observable }     from 'rxjs/Observable';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/do';  // debug\nimport 'rxjs/add/operator/catch';\n\n@Injectable()\nexport class MenuService {\n    static nextMenuId = 100;\n    constructor(private http: Http) {}\n\n    private munuItemsUrl = 'app/data/menuitems.json';  // URL to web api\n\n    getAllMenuItems(): Observable<ItemDefinition[]> {\n        return this.http.get(this.munuItemsUrl)\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    private extractData(res: Response) {\n        if (res.status < 200 || res.status >= 300) {\n            throw new Error('Bad response status: ' + res.status);\n        }\n        let body = res.json();\n        return body.data || { };\n    }\n\n    private handleError (error: any) {\n        // In a real world app, we might send the error to remote logging infrastructure\n        let errMsg = error.message || 'Server error';\n        console.error(errMsg); // log to console instead\n        return Observable.throw(errMsg);\n    }\n}"],"sourceRoot":"/source/"}