{"version":3,"sources":["app/services/verbs.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA+B,eAAe,CAAC,CAAA;AAC/C,qBAA+B,eAAe,CAAC,CAAA;AAK/C;IAMI,wBAAY,IAAY;QACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,EAAE,GAAG,EAAE,cAAc,CAAC,OAAO,CAAC;IACvC,CAAC;IAED,+BAAM,GAAN,UAAO,IAAoB,EAAE,YAAoB;QAC7C,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IATM,sBAAO,GAAW,CAAC,CAAC;IAU/B,qBAAC;AAAD,CAdA,AAcC,IAAA;AAID;IAGI,sBAAqB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAEvB,cAAS,GAAG,gBAAgB,CAAC,CAAE,iBAAiB;IAFtB,CAAC;IAJvC;QAAC,iBAAU,EAAE;;oBAAA;IA2Bb,mBAAC;AAAD,CA1BA,AA0BC,IAAA;AA1BY,oBAAY,eA0BxB,CAAA","file":"app/services/verbs.service.js","sourcesContent":["import { Injectable }     from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Headers, RequestOptions } from '@angular/http';\n//import { Hero }           from './models/verbs.model';\nimport { Observable }     from 'rxjs/Observable';\n\nclass VerbDefinition {\n    public nome: string;\n    public id: number;\n\n    static qtItens: number = 0;\n\n    constructor(nome: string) {\n        this.nome = nome;\n        this.id = ++VerbDefinition.qtItens;\n    }\n\n    filter(list: VerbDefinition, filterOption: string){\n        return list;\n    }\n}\n\n\n@Injectable()\nexport class VerbsService {\n    public verbs: any;\n\n    constructor (private http: Http) {}\n\n    private heroesUrl = 'app/apis/verbs';  // URL to web api\n\n    /*getVerbs(): Observable<VerbDefinition[]>{\n        return this.http.get(this.heroesUrl)\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    private extractData(res: Response) {\n        if (res.status < 200 || res.status >= 300) {\n            throw new Error('Bad response status: ' + res.status);\n        }\n        let body = res.json();\n        return body.data || { };\n    }\n    private handleError (error: any) {\n        // In a real world app, we might send the error to remote logging infrastructure\n        let errMsg = error.message || 'Server error';\n        console.error(errMsg); // log to console instead\n        return Observable.throw(errMsg);\n    }*/\n}"],"sourceRoot":"/source/"}