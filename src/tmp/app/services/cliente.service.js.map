{"version":3,"sources":["app/services/cliente.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;;GAEG;AACH,qBAA+B,eAAe,CAAC,CAAA;AAC/C,qBAA+B,eAAe,CAAC,CAAA;AAC/C,qBAAwC,eAAe,CAAC,CAAA;AACxD,2BAA+B,iBAAiB,CAAC,CAAA;AACjD,QAAO,2BAA2B,CAAC,CAAA;AACnC,QAAO,uBAAuB,CAAC,CAAA;AAC/B,QAAO,sBAAsB,CAAC,CAAA,CAAE,QAAQ;AACxC,QAAO,yBAAyB,CAAC,CAAA;AAMjC;IACI,yBAAqB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAE/B;;WAEG;QAEK,gBAAW,GAAG,eAAe,CAAC,CAAE,iBAAiB;IANvB,CAAC;IAQnC,qCAAW,GAAX;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACjC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAED,oCAAU,GAAV,UAAY,OAA0B;QAElC,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,SAAA,OAAO,EAAE,CAAC,CAAC;QACvC,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;QAClE,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QAEvD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,OAAO,CAAC;aACjD,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAGO,qCAAW,GAAnB,UAAoB,GAAa;QAC7B,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC;YACxC,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAC1D,CAAC;QACD,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAG,CAAC;IAC5B,CAAC;IAEO,qCAAW,GAAnB,UAAqB,KAAU;QAC3B,gFAAgF;QAChF,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,IAAI,cAAc,CAAC;QAC7C,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAzCL;QAAC,iBAAU,EAAE;;uBAAA;IA0Cb,sBAAC;AAAD,CAzCA,AAyCC,IAAA;AAzCY,uBAAe,kBAyC3B,CAAA","file":"app/services/cliente.service.js","sourcesContent":["/**\n * Created by LeonardoAlmeida on 07/05/16.\n */\nimport { Injectable }     from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Headers, RequestOptions } from '@angular/http';\nimport { Observable }     from 'rxjs/Observable';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/do';  // debug\nimport 'rxjs/add/operator/catch';\n\nimport { ClienteDefinition } from '../models/cliente.model';\n\n\n@Injectable()\nexport class ClientesService {\n    constructor (private http: Http) {}\n\n    /*\n     private clientesUrl = 'app/clientes.json'; // URL to JSON file\n     */\n\n    private clientesUrl = 'data/clientes';  // URL to web api\n\n    getClientes (): Observable<ClienteDefinition[]> {\n        return this.http.get(this.clientesUrl)\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    addCliente (cliente: ClienteDefinition): Observable<ClienteDefinition>  {\n\n        let body = JSON.stringify({ cliente });\n        let headers = new Headers({ 'Content-Type': 'application/json' });\n        let options = new RequestOptions({ headers: headers });\n\n        return this.http.post(this.clientesUrl, body, options)\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n\n    private extractData(res: Response) {\n        if (res.status < 200 || res.status >= 300) {\n            throw new Error('Bad response status: ' + res.status);\n        }\n        let body = res.json();\n        return body.data || { };\n    }\n\n    private handleError (error: any) {\n        // In a real world app, we might send the error to remote logging infrastructure\n        let errMsg = error.message || 'Server error';\n        console.error(errMsg); // log to console instead\n        return Observable.throw(errMsg);\n    }\n}"],"sourceRoot":"/source/"}